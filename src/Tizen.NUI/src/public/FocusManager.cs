// Copyright (c) 2016 Samsung Electronics Co., Ltd All Rights Reserved
// PROPRIETARY/CONFIDENTIAL 
// This software is the confidential and proprietary
// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
// not disclose such Confidential Information and shall use it only in
// accordance with the terms of the license agreement you entered into with
// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
// suitability of the software, either express or implied, including but not
// limited to the implied warranties of merchantability, fitness for a
// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
// damages suffered by licensee as a result of using, modifying or distributing
// this software or its derivatives.

// Copyright (c) 2017 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
// Some have been manually changed


namespace Tizen.NUI
{

    using System;
    using System.Runtime.InteropServices;

    public class FocusManager : BaseHandle
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal FocusManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicManualPINVOKE.FocusManager_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FocusManager obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~FocusManager()
        {
            DisposeQueue.Instance.Add(this);
        }

        public override void Dispose()
        {
            if (!Stage.IsInstalled())
            {
                DisposeQueue.Instance.Add(this);
                return;
            }

            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        NDalicManualPINVOKE.delete_FocusManager(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }


        /**
          * @brief Event arguments that passed via PreFocusChange signal
          *
          */
        public class PreFocusChangeEventArgs : EventArgs
        {
            private View _current;
            private View _proposed;
            private View.FocusDirection _direction;

            public View CurrentView
            {
                get
                {
                    return _current;
                }
                set
                {
                    _current = value;
                }
            }

            public View ProposedView
            {
                get
                {
                    return _proposed;
                }
                set
                {
                    _proposed = value;
                }
            }

            public View.FocusDirection Direction
            {
                get
                {
                    return _direction;
                }
                set
                {
                    _direction = value;
                }
            }
        }

        private EventHandlerWithReturnType<object, PreFocusChangeEventArgs, View> _preFocusChangeEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        internal delegate IntPtr PreFocusChangeEventCallback(IntPtr current, IntPtr proposed, View.FocusDirection direction);
        private PreFocusChangeEventCallback _preFocusChangeCallback;

        public event EventHandlerWithReturnType<object, PreFocusChangeEventArgs, View> PreFocusChange
        {
            add
            {
                if (_preFocusChangeEventHandler == null)
                {
                    _preFocusChangeCallback = OnPreFocusChange;
                    PreFocusChangeSignal().Connect(_preFocusChangeCallback);
                }
                _preFocusChangeEventHandler += value;
            }
            remove
            {
                if (_preFocusChangeEventHandler != null)
                {
                    PreFocusChangeSignal().Disconnect(_preFocusChangeCallback);
                }
                _preFocusChangeEventHandler -= value;
            }
        }

        private IntPtr OnPreFocusChange(IntPtr current, IntPtr proposed, View.FocusDirection direction)
        {
            View view = null;
            PreFocusChangeEventArgs e = new PreFocusChangeEventArgs();

            e.CurrentView = View.DownCast(Actor.GetActorFromPtr(current));
            e.ProposedView = View.DownCast(Actor.GetActorFromPtr(proposed));
            e.Direction = direction;

            if (_preFocusChangeEventHandler != null)
            {
                view = _preFocusChangeEventHandler(this, e);
            }
            return view.GetPtrfromView();
        }


        /**
          * @brief Event arguments that passed via FocusChanged signal
          *
          */
        public class FocusChangedEventArgs : EventArgs
        {
            private View _current;
            private View _next;

            public View CurrentView
            {
                get
                {
                    return _current;
                }
                set
                {
                    _current = value;
                }
            }

            public View NextView
            {
                get
                {
                    return _next;
                }
                set
                {
                    _next = value;
                }
            }
        }

        private EventHandler<FocusChangedEventArgs> _focusChangedEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        internal delegate void FocusChangedEventCallback(IntPtr current, IntPtr next);
        private FocusChangedEventCallback _focusChangedEventCallback;

        public event EventHandler<FocusChangedEventArgs> FocusChanged
        {
            add
            {
                if (_focusChangedEventCallback == null)
                {
                    _focusChangedEventCallback = OnFocusChanged;
                    FocusChangedSignal().Connect(_focusChangedEventCallback);
                }
                _focusChangedEventHandler += value;
            }
            remove
            {
                if (_focusChangedEventCallback != null)
                {
                    FocusChangedSignal().Disconnect(_focusChangedEventCallback);
                }
                _focusChangedEventHandler -= value;
            }
        }

        private void OnFocusChanged(IntPtr current, IntPtr next)
        {
            FocusChangedEventArgs e = new FocusChangedEventArgs();

            e.CurrentView = View.DownCast(Actor.GetActorFromPtr(current));
            e.NextView = View.DownCast(Actor.GetActorFromPtr(next));

            if (_focusChangedEventHandler != null)
            {
                _focusChangedEventHandler(this, e);
            }
        }


        /**
          * @brief Event arguments that passed via FocusGroupChanged signal
          *
          */
        public class FocusGroupChangedEventArgs : EventArgs
        {
            private View _current;
            private bool _forwardDirection;

            public View CurrentView
            {
                get
                {
                    return _current;
                }
                set
                {
                    _current = value;
                }
            }

            public bool ForwardDirection
            {
                get
                {
                    return _forwardDirection;
                }
                set
                {
                    _forwardDirection = value;
                }
            }
        }

        private EventHandler<FocusGroupChangedEventArgs> _focusGroupChangedEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void FocusGroupChangedEventCallback(IntPtr current, bool forwardDirection);
        private FocusGroupChangedEventCallback _focusGroupChangedEventCallback;

        public event EventHandler<FocusGroupChangedEventArgs> FocusGroupChanged
        {
            add
            {
                if (_focusGroupChangedEventCallback == null)
                {
                    _focusGroupChangedEventCallback = OnFocusGroupChanged;
                    FocusGroupChangedSignal().Connect(_focusGroupChangedEventCallback);
                }
                _focusGroupChangedEventHandler += value;
            }
            remove
            {
                if (_focusGroupChangedEventCallback != null)
                {
                    FocusGroupChangedSignal().Disconnect(_focusGroupChangedEventCallback);
                }
                _focusGroupChangedEventHandler -= value;
            }
        }

        private void OnFocusGroupChanged(IntPtr current, bool forwardDirection)
        {
            FocusGroupChangedEventArgs e = new FocusGroupChangedEventArgs();

            e.CurrentView = View.DownCast(Actor.GetActorFromPtr(current));
            e.ForwardDirection = forwardDirection;

            if (_focusGroupChangedEventHandler != null)
            {
                _focusGroupChangedEventHandler(this, e);
            }
        }


        /**
          * @brief Event arguments that passed via FocusedActorEnterKey signal
          *
          */
        public class FocusedViewEnterKeyEventArgs : EventArgs
        {
            private View _view;

            public View View
            {
                get
                {
                    return _view;
                }
                set
                {
                    _view = value;
                }
            }
        }

        private EventHandler<FocusedViewEnterKeyEventArgs> _focusedViewEnterKeyEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void FocusedViewEnterKeyEventCallback(IntPtr view);
        private FocusedViewEnterKeyEventCallback _focusedViewEnterKeyEventCallback;

        public event EventHandler<FocusedViewEnterKeyEventArgs> FocusedViewEnterKeyPressed
        {
            add
            {
                if (_focusedViewEnterKeyEventCallback == null)
                {
                    _focusedViewEnterKeyEventCallback = OnFocusedViewEnterKey;
                    FocusedActorEnterKeySignal().Connect(_focusedViewEnterKeyEventCallback);
                }
                _focusedViewEnterKeyEventHandler += value;
            }
            remove
            {
                if (_focusedViewEnterKeyEventCallback != null)
                {
                    FocusedActorEnterKeySignal().Disconnect(_focusedViewEnterKeyEventCallback);
                }
                _focusedViewEnterKeyEventHandler -= value;
            }
        }

        private void OnFocusedViewEnterKey(IntPtr view)
        {
            FocusedViewEnterKeyEventArgs e = new FocusedViewEnterKeyEventArgs();

            e.View = View.DownCast(Actor.GetActorFromPtr(view));

            if (_focusedViewEnterKeyEventHandler != null)
            {
                _focusedViewEnterKeyEventHandler(this, e);
            }
        }


        internal FocusManager() : this(NDalicManualPINVOKE.new_FocusManager(), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal static FocusManager Get()
        {
            FocusManager ret = new FocusManager(NDalicManualPINVOKE.FocusManager_Get(), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetCurrentFocusView(View view)
        {
            Actor actor = (Tizen.NUI.Actor)view;
            bool ret = NDalicManualPINVOKE.FocusManager_SetCurrentFocusActor(swigCPtr, Actor.getCPtr(actor));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public View GetCurrentFocusView()
        {
            Actor ret = new Actor(NDalicManualPINVOKE.FocusManager_GetCurrentFocusActor(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return View.DownCast(ret);
        }

        public bool MoveFocus(View.FocusDirection direction)
        {
            bool ret = NDalicManualPINVOKE.FocusManager_MoveFocus(swigCPtr, (int)direction);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ClearFocus()
        {
            NDalicManualPINVOKE.FocusManager_ClearFocus(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool FocusGroupLoop
        {
            set
            {
                SetFocusGroupLoop(value);
            }
            get
            {
                return GetFocusGroupLoop();
            }
        }

        internal void SetFocusGroupLoop(bool enabled)
        {
            NDalicManualPINVOKE.FocusManager_SetFocusGroupLoop(swigCPtr, enabled);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal bool GetFocusGroupLoop()
        {
            bool ret = NDalicManualPINVOKE.FocusManager_GetFocusGroupLoop(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void SetAsFocusGroup(View view, bool isFocusGroup)
        {
            Actor actor = (Tizen.NUI.Actor)view;
            NDalicManualPINVOKE.FocusManager_SetAsFocusGroup(swigCPtr, Actor.getCPtr(actor), isFocusGroup);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool IsFocusGroup(View view)
        {
            Actor actor = (Tizen.NUI.Actor)view;
            bool ret = NDalicManualPINVOKE.FocusManager_IsFocusGroup(swigCPtr, Actor.getCPtr(actor));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public View GetFocusGroup(View view)
        {
            Actor actor = (Tizen.NUI.Actor)view;
            Actor ret = new Actor(NDalicManualPINVOKE.FocusManager_GetFocusGroup(swigCPtr, Actor.getCPtr(actor)), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return View.DownCast(ret);
        }

        public View FocusIndicator
        {
            set
            {
                SetFocusIndicatorView(value);
            }
            get
            {
                return GetFocusIndicatorView();
            }
        }

        internal void SetFocusIndicatorView(View indicator)
        {
            Actor actor = (Tizen.NUI.Actor)indicator;
            NDalicManualPINVOKE.FocusManager_SetFocusIndicatorActor(swigCPtr, Actor.getCPtr(actor));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal View GetFocusIndicatorView()
        {
            Actor ret = new Actor(NDalicManualPINVOKE.FocusManager_GetFocusIndicatorActor(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return View.DownCast(ret);
        }

        internal PreFocusChangeSignal PreFocusChangeSignal()
        {
            PreFocusChangeSignal ret = new PreFocusChangeSignal(NDalicManualPINVOKE.FocusManager_PreFocusChangeSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal FocusChangedSignal FocusChangedSignal()
        {
            FocusChangedSignal ret = new FocusChangedSignal(NDalicManualPINVOKE.FocusManager_FocusChangedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal FocusGroupChangedSignal FocusGroupChangedSignal()
        {
            FocusGroupChangedSignal ret = new FocusGroupChangedSignal(NDalicManualPINVOKE.FocusManager_FocusGroupChangedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal ActorSignal FocusedActorEnterKeySignal()
        {
            ActorSignal ret = new ActorSignal(NDalicManualPINVOKE.FocusManager_FocusedActorEnterKeySignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        private static readonly FocusManager instance = FocusManager.Get();

        public static FocusManager Instance
        {
            get
            {
                return instance;
            }
        }

    }

}
