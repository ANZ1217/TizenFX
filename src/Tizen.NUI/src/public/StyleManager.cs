// Copyright (c) 2016 Samsung Electronics Co., Ltd All Rights Reserved
// PROPRIETARY/CONFIDENTIAL 
// This software is the confidential and proprietary
// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
// not disclose such Confidential Information and shall use it only in
// accordance with the terms of the license agreement you entered into with
// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
// suitability of the software, either express or implied, including but not
// limited to the implied warranties of merchantability, fitness for a
// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
// damages suffered by licensee as a result of using, modifying or distributing
// this software or its derivatives.

// Copyright (c) 2017 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
// Some have been manually changed


namespace Tizen.NUI
{

    using System;
    using System.Runtime.InteropServices;

    public class StyleManager : BaseHandle
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal StyleManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.StyleManager_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StyleManager obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~StyleManager()
        {
            DisposeQueue.Instance.Add(this);
        }

        public override void Dispose()
        {
            if (!Stage.IsInstalled())
            {
                DisposeQueue.Instance.Add(this);
                return;
            }

            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        NDalicPINVOKE.delete_StyleManager(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }


        public class StyleChangedEventArgs : EventArgs
        {
            private StyleManager _styleManager;
            private StyleChangeType _styleChange;

            public StyleManager StyleManager
            {
                get
                {
                    return _styleManager;
                }
                set
                {
                    _styleManager = value;
                }
            }

            public StyleChangeType StyleChange
            {
                get
                {
                    return _styleChange;
                }
                set
                {
                    _styleChange = value;
                }
            }

        }

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StyleChangedCallback(IntPtr styleManager, StyleChangeType styleChange);
        private StyleChangedCallback _styleManagerStyleChangedCallback;
        private EventHandler<StyleChangedEventArgs> _styleManagerStyleChangedEventHandler;

        /**
          * @brief Event for StyleChanged signal which can be used to subscribe/unsubscribe the
          * event handler (in the type of StyleChangedEventHandler-DaliEventHandler<StyleChangedEventArgs>) 
          * provided by the user. StyleChanged signal is is emitted after the style (e.g. theme/font change) has changed
          * and the controls have been informed.
          */
        public event EventHandler<StyleChangedEventArgs> StyleChanged
        {
            add
            {
                if (_styleManagerStyleChangedCallback == null)
                {
                    _styleManagerStyleChangedCallback = OnStyleChanged;
                    StyleChangedSignal().Connect(_styleManagerStyleChangedCallback);
                }
                _styleManagerStyleChangedEventHandler += value;
            }
            remove
            {
                if (_styleManagerStyleChangedCallback != null)
                {
                    StyleChangedSignal().Disconnect(_styleManagerStyleChangedCallback);
                }
                _styleManagerStyleChangedEventHandler -= value;
            }
        }

        private void OnStyleChanged(IntPtr styleManager, StyleChangeType styleChange)
        {
            StyleChangedEventArgs e = new StyleChangedEventArgs();

            e.StyleManager = StyleManager.GetStyleManagerFromPtr(styleManager);
            e.StyleChange = styleChange;

            if (_styleManagerStyleChangedEventHandler != null)
            {
                _styleManagerStyleChangedEventHandler(this, e);
            }
        }

        internal static StyleManager GetStyleManagerFromPtr(global::System.IntPtr cPtr)
        {
            StyleManager ret = new StyleManager(cPtr, false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }


        public StyleManager() : this(NDalicPINVOKE.new_StyleManager(), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public static StyleManager Get()
        {
            StyleManager ret = new StyleManager(NDalicPINVOKE.StyleManager_Get(), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ApplyTheme(string themeFile)
        {
            NDalicPINVOKE.StyleManager_ApplyTheme(swigCPtr, themeFile);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public void ApplyDefaultTheme()
        {
            NDalicPINVOKE.StyleManager_ApplyDefaultTheme(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetStyleConstant(string key, PropertyValue value)
        {
            NDalicPINVOKE.StyleManager_SetStyleConstant(swigCPtr, key, PropertyValue.getCPtr(value));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool GetStyleConstant(string key, PropertyValue valueOut)
        {
            bool ret = NDalicPINVOKE.StyleManager_GetStyleConstant(swigCPtr, key, PropertyValue.getCPtr(valueOut));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ApplyStyle(View control, string jsonFileName, string styleName)
        {
            NDalicPINVOKE.StyleManager_ApplyStyle(swigCPtr, View.getCPtr(control), jsonFileName, styleName);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal StyleChangedSignal StyleChangedSignal()
        {
            StyleChangedSignal ret = new StyleChangedSignal(NDalicPINVOKE.StyleManager_StyleChangedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

    }

    public enum StyleChangeType
    {
        DefaultFontChange,
        DefaultFontSizeChange,
        ThemeChange
    }

}
