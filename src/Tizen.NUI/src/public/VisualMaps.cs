// Copyright (c) 2016 Samsung Electronics Co., Ltd All Rights Reserved
// PROPRIETARY/CONFIDENTIAL 
// This software is the confidential and proprietary
// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
// not disclose such Confidential Information and shall use it only in
// accordance with the terms of the license agreement you entered into with
// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
// suitability of the software, either express or implied, including but not
// limited to the implied warranties of merchantability, fitness for a
// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
// damages suffered by licensee as a result of using, modifying or distributing
// this software or its derivatives.

// Copyright (c) 2017 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
// Some have been manually changed

namespace Tizen.NUI
{
    using System;

    public class ImageVisualMap
    {
        public ImageVisualMap()
        {
        }

        private string _url = "";
        private FittingModeType _fittingMode = FittingModeType.ShrinkToFit;
        private SamplingModeType _samplingMode = SamplingModeType.BOX;
        private float _depthIndex = 0.0f;
        /* the following properties should be done also.        
        public static readonly int DesiredWidth = NDalic.IMAGE_VISUAL_DESIRED_WIDTH;
        public static readonly int DesiredHeight = NDalic.IMAGE_VISUAL_DESIRED_HEIGHT;
        public static readonly int SynchronousLoading = NDalic.IMAGE_VISUAL_SYNCHRONOUS_LOADING;
        public static readonly int BorderOnly = NDalic.IMAGE_VISUAL_BORDER_ONLY;
        public static readonly int PixelArea = NDalic.IMAGE_VISUAL_PIXEL_AREA;
        public static readonly int WrapModeU = NDalic.IMAGE_VISUAL_WRAP_MODE_U;
        public static readonly int WrapModeV = NDalic.IMAGE_VISUAL_WRAP_MODE_V;
        */
        private PropertyMap _outputMap;


        public string URL
        {
            get
            {
                return _url;
            }
            set
            {
                _url = value;
            }
        }

        public FittingModeType FittingMode
        {
            get
            {
                return _fittingMode;
            }
            set
            {
                _fittingMode = value;
            }
        }
        public SamplingModeType SamplingMode
        {
            get
            {
                return _samplingMode;
            }
            set
            {
                _samplingMode = value;
            }
        }
        public float DepthIndex
        {
            get
            {
                return _depthIndex;
            }
            set
            {
                _depthIndex = value;
            }
        }

        public PropertyMap OutputMap
        {
            get
            {
                ComposingPropertyMap();
                return _outputMap;
            }
        }

        private void ComposingPropertyMap()
        {
            if (_url != "")
            {
                _outputMap = new PropertyMap(); ;
                _outputMap.Add(Tizen.NUI.Constants.Visual.Property.Type, new PropertyValue((int)Tizen.NUI.Constants.Visual.Type.Image));
                _outputMap.Add(Tizen.NUI.Constants.ImageVisualProperty.URL, new PropertyValue(_url));
                _outputMap.Add(Tizen.NUI.Constants.ImageVisualProperty.FittingMode, new PropertyValue((int)_fittingMode));
                _outputMap.Add(Tizen.NUI.Constants.ImageVisualProperty.SamplingMode, new PropertyValue((int)_samplingMode));
                //more PropertyMap should be added
            }
        }
    }

    public class TextVisualMap
    {
        public TextVisualMap()
        {
        }

        private string _text = "";
        private Color _textColor = Color.Black;
        private float _pointSize = 0.0f;
        private float _depthIndex = 0.0f;
        /* the following properties should be done also.        
        public static readonly int FontFamily = NDalic.TEXT_VISUAL_FONT_FAMILY;
        public static readonly int FontStyle = NDalic.TEXT_VISUAL_FONT_STYLE;
        public static readonly int MultiLine = NDalic.TEXT_VISUAL_MULTI_LINE;
        public static readonly int HorizontalAlignment = NDalic.TEXT_VISUAL_HORIZONTAL_ALIGNMENT;
        public static readonly int VerticalAlignment = NDalic.TEXT_VISUAL_VERTICAL_ALIGNMENT;
        public static readonly int EnableMarkup = NDalic.TEXT_VISUAL_ENABLE_MARKUP;
        */
        private PropertyMap _outputMap;

        public string Text
        {
            get
            {
                return _text;
            }
            set
            {
                _text = value;
            }
        }

        public Color TextColor
        {
            get
            {
                return _textColor;
            }
            set
            {
                _textColor = value;
            }
        }
        public float PointSize
        {
            get
            {
                return _pointSize;
            }
            set
            {
                _pointSize = value;
            }
        }
        public float DepthIndex
        {
            get
            {
                return _depthIndex;
            }
            set
            {
                _depthIndex = value;
            }
        }

        public PropertyMap OutputMap
        {
            get
            {
                ComposingPropertyMap();
                return _outputMap;
            }
        }

        private void ComposingPropertyMap()
        {
            if (_text != "" && _pointSize != 0)
            {
                Tizen.Log.Debug("NUI", "p1 !!!!!");
                _outputMap = new PropertyMap(); ;
                _outputMap.Add(Tizen.NUI.Constants.Visual.Property.Type, new PropertyValue((int)Tizen.NUI.Constants.Visual.Type.Text));
                _outputMap.Add(Tizen.NUI.Constants.TextVisualProperty.Text, new PropertyValue(_text));
                _outputMap.Add(Tizen.NUI.Constants.TextVisualProperty.TextColor, new PropertyValue(_textColor));
                _outputMap.Add(Tizen.NUI.Constants.TextVisualProperty.PointSize, new PropertyValue(_pointSize));
                //more PropertyMap should be added
            }
        }
    }

}
