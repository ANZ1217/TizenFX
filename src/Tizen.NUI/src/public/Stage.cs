// Copyright (c) 2016 Samsung Electronics Co., Ltd All Rights Reserved
// PROPRIETARY/CONFIDENTIAL 
// This software is the confidential and proprietary
// information of SAMSUNG ELECTRONICS ("Confidential Information"). You shall
// not disclose such Confidential Information and shall use it only in
// accordance with the terms of the license agreement you entered into with
// SAMSUNG ELECTRONICS. SAMSUNG make no representations or warranties about the
// suitability of the software, either express or implied, including but not
// limited to the implied warranties of merchantability, fitness for a
// particular purpose, or non-infringement. SAMSUNG shall not be liable for any
// damages suffered by licensee as a result of using, modifying or distributing
// this software or its derivatives.

// Copyright (c) 2017 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
// Some have been manually changed


namespace Tizen.NUI
{

    using System;
    using System.Runtime.InteropServices;


    public class Stage : BaseHandle
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal Stage(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.Stage_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Stage obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~Stage()
        {
            DisposeQueue.Instance.Add(this);
        }

        public override void Dispose()
        {
            if (!Stage.IsInstalled())
            {
                DisposeQueue.Instance.Add(this);
                return;
            }

            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        NDalicPINVOKE.delete_Stage(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }


        /**
          * @brief Event arguments that passed via Touch signal
          *
          */
        public class TouchEventArgs : EventArgs
        {
            private Touch _touch;

            /**
              * @brief Touch - contains the information of touch points
              *
              */
            public Touch Touch
            {
                get
                {
                    return _touch;
                }
                set
                {
                    _touch = value;
                }
            }
        }

        private event EventHandler<TouchEventArgs> _stageTouchEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageTouchCallbackType(IntPtr data);
        private StageTouchCallbackType _stageTouchCallback;

        /**
          * @brief Event for TouchEvent signal which can be used to subscribe/unsubscribe the event handler
          * TouchEvent signal is emitted when the screen is touched and when the touch ends
          * (i.e. the down & up touch events only).
          *
          */
        public event EventHandler<TouchEventArgs> Touch
        {
            add
            {
                if (_stageTouchEventHandler == null)
                {
                    _stageTouchCallback = OnStageTouch;
                    TouchSignal().Connect(_stageTouchCallback);
                }

                _stageTouchEventHandler += value;
            }
            remove
            {
                _stageTouchEventHandler -= value;

                if (_stageTouchEventHandler == null && _stageTouchCallback != null)
                {
                    TouchSignal().Disconnect(_stageTouchCallback);
                }
            }
        }

        private void OnStageTouch(IntPtr data)
        {
            TouchEventArgs e = new TouchEventArgs();

            if (data != null)
            {
                e.Touch = Tizen.NUI.Touch.GetTouchFromPtr(data);
            }

            if (_stageTouchEventHandler != null)
            {
                _stageTouchEventHandler(this, e);
            }
        }

        /**
          * @brief Wheel arguments that passed via Wheel signal
          *
          */
        public class WheelEventArgs : EventArgs
        {
            private Wheel _wheel;

            public Wheel Wheel
            {
                get
                {
                    return _wheel;
                }
                set
                {
                    _wheel = value;
                }
            }
        }

        private event EventHandler<WheelEventArgs> _stageWheelEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageWheelCallbackType(IntPtr data);
        private StageWheelCallbackType _stageWheelCallback;

        /**
          * @brief Event for Wheel signal which can be used to subscribe/unsubscribe the event handler
          * Wheel signal is emitted is emitted when wheel event is received.
          *
          */
        public event EventHandler<WheelEventArgs> Wheel
        {
            add
            {
                if (_stageWheelEventHandler == null)
                {
                    _stageWheelCallback = OnStageWheel;
                    WheelEventSignal().Connect(_stageWheelCallback);
                }

                _stageWheelEventHandler += value;
            }
            remove
            {
                _stageWheelEventHandler -= value;

                if (_stageWheelEventHandler == null && _stageWheelCallback != null)
                {
                    WheelEventSignal().Disconnect(_stageWheelCallback);
                }

            }
        }

        private void OnStageWheel(IntPtr data)
        {
            WheelEventArgs e = new WheelEventArgs();

            if (data != null)
            {
                e.Wheel = Tizen.NUI.Wheel.GetWheelFromPtr(data);
            }

            if (_stageWheelEventHandler != null)
            {
                _stageWheelEventHandler(this, e);
            }
        }

        /**
          * @brief Event arguments that passed via Key signal
          *
          */
        public class KeyEventArgs : EventArgs
        {
            private Key _key;

            public Key Key
            {
                get
                {
                    return _key;
                }
                set
                {
                    _key = value;
                }
            }
        }

        private event EventHandler<KeyEventArgs> _stageKeyEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageKeyCallbackType(IntPtr data);
        private StageKeyCallbackType _stageKeyCallback;

        /**
          * @brief Event for Key signal which can be used to subscribe/unsubscribe the event handler
          * Key signal is emitted is emitted when key event is received.
          *
          */
        public event EventHandler<KeyEventArgs> Key
        {
            add
            {
                if (_stageKeyEventHandler == null)
                {
                    _stageKeyCallback = OnStageKey;
                    KeyEventSignal().Connect(_stageKeyCallback);
                }

                _stageKeyEventHandler += value;
            }
            remove
            {
                _stageKeyEventHandler -= value;

                if (_stageKeyEventHandler == null && _stageKeyCallback != null)
                {
                    KeyEventSignal().Disconnect(_stageKeyCallback);
                }
            }
        }

        // Callback for Stage KeyEventsignal
        private void OnStageKey(IntPtr data)
        {
            KeyEventArgs e = new KeyEventArgs();

            if (data != null)
            {
                e.Key = Tizen.NUI.Key.GetKeyFromPtr(data);
            }

            if (_stageKeyEventHandler != null)
            {
                _stageKeyEventHandler(this, e);
            }
        }

        private event EventHandler _stageEventProcessingFinishedEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageEventProcessingFinishedEventCallbackType();
        private StageEventProcessingFinishedEventCallbackType _stageEventProcessingFinishedEventCallback;

        /**
          * @brief Event for EventProcessingFinished signal which can be used to subscribe/unsubscribe the event handler
          * provided by the user. EventProcessingFinished signal is emitted just after the event processing is finished.
          *
          */
        internal event EventHandler EventProcessingFinished
        {
            add
            {
                if (_stageEventProcessingFinishedEventHandler == null)
                {
                    _stageEventProcessingFinishedEventCallback = OnEventProcessingFinished;
                    EventProcessingFinishedSignal().Connect(_stageEventProcessingFinishedEventCallback);
                }

                _stageEventProcessingFinishedEventHandler += value;
            }
            remove
            {
                _stageEventProcessingFinishedEventHandler -= value;

                if (_stageEventProcessingFinishedEventHandler == null && _stageEventProcessingFinishedEventCallback != null)
                {
                    EventProcessingFinishedSignal().Disconnect(_stageEventProcessingFinishedEventCallback);
                }
            }
        }

        private void OnEventProcessingFinished()
        {
            if (_stageEventProcessingFinishedEventHandler != null)
            {
                _stageEventProcessingFinishedEventHandler(this, null);
            }
        }

        private event EventHandler _stageContextLostEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageContextLostEventCallbackType();
        private StageContextLostEventCallbackType _stageContextLostEventCallback;

        /**
          * @brief Event for ContextLost signal which can be used to subscribe/unsubscribe the event handler
          * ContextLost signal is emitted when the GL context is lost (Platform specific behaviour).
          *
          */
        internal event EventHandler ContextLost
        {
            add
            {
                if (_stageContextLostEventHandler == null)
                {
                    _stageContextLostEventCallback = OnContextLost;
                    ContextLostSignal().Connect(_stageContextLostEventCallback);
                }

                _stageContextLostEventHandler += value;
            }
            remove
            {
                _stageContextLostEventHandler -= value;

                if (_stageContextLostEventHandler == null && _stageContextLostEventCallback != null)
                {
                    ContextLostSignal().Disconnect(_stageContextLostEventCallback);
                }
            }
        }

        private void OnContextLost()
        {
            if (_stageContextLostEventHandler != null)
            {
                _stageContextLostEventHandler(this, null);
            }
        }

        private event EventHandler _stageContextRegainedEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageContextRegainedEventCallbackType();
        private StageContextRegainedEventCallbackType _stageContextRegainedEventCallback;

        /**
          * @brief Event for ContextRegained signal which can be used to subscribe/unsubscribe the event handler
          * provided by the user. ContextRegained signal is emitted when the GL context is regained (Platform specific
          * behaviour).
          *
          */
        internal event EventHandler ContextRegained
        {
            add
            {
                if (_stageContextRegainedEventHandler == null)
                {
                    _stageContextRegainedEventCallback = OnContextRegained;
                    ContextRegainedSignal().Connect(_stageContextRegainedEventCallback);
                }

                _stageContextRegainedEventHandler += value;
            }
            remove
            {
                _stageContextRegainedEventHandler -= value;

                if (_stageContextRegainedEventHandler == null && _stageContextRegainedEventCallback != null)
                {
                    ContextRegainedSignal().Disconnect(_stageContextRegainedEventCallback);
                }
            }
        }

        private void OnContextRegained()
        {
            if (_stageContextRegainedEventHandler != null)
            {
                _stageContextRegainedEventHandler(this, null);
            }
        }

        private event EventHandler _stageSceneCreatedEventHandler;
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        private delegate void StageSceneCreatedEventCallbackType();
        private StageSceneCreatedEventCallbackType _stageSceneCreatedEventCallback;

        /**
          * @brief Event for SceneCreated signal which can be used to subscribe/unsubscribe the event handler
          * SceneCreated signal is emitted after the initial scene is created.
          *
          */
        internal event EventHandler SceneCreated
        {
            add
            {
                if (_stageSceneCreatedEventHandler == null)
                {
                    _stageSceneCreatedEventCallback = OnSceneCreated;
                    SceneCreatedSignal().Connect(_stageSceneCreatedEventCallback);
                }

                _stageSceneCreatedEventHandler += value;
            }
            remove
            {
                _stageSceneCreatedEventHandler -= value;

                if (_stageSceneCreatedEventHandler == null && _stageSceneCreatedEventCallback != null)
                {
                    SceneCreatedSignal().Disconnect(_stageSceneCreatedEventCallback);
                }

            }
        }

        private void OnSceneCreated()
        {
            if (_stageSceneCreatedEventHandler != null)
            {
                _stageSceneCreatedEventHandler(this, null);
            }
        }


        public Size2D Size
        {
            get
            {
                Size2D ret = GetSize();
                return ret;
            }
        }

        public Color BackgroundColor
        {
            set
            {
                SetBackgroundColor(value);
            }
            get
            {
                Color ret = GetBackgroundColor();
                return ret;
            }
        }

        public Vector2 Dpi
        {
            get
            {
                return GetDpi();
            }
        }

        public uint LayerCount
        {
            get
            {
                return GetLayerCount();
            }
        }

        private static readonly Stage instance = Stage.GetCurrent();

        public static Stage Instance
        {
            get
            {
                return instance;
            }
        }

        public Layer GetDefaultLayer()
        {
            return this.GetRootLayer();
        }

        public void AddLayer(Layer layer)
        {
            this.Add((Actor)layer);
        }

        public void RemoveLayer(Layer layer)
        {
            this.Remove((Actor)layer);
        }

        internal static Vector4 DEFAULT_BACKGROUND_COLOR
        {
            get
            {
                global::System.IntPtr cPtr = NDalicPINVOKE.Stage_DEFAULT_BACKGROUND_COLOR_get();
                Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
                if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        internal static Vector4 DEBUG_BACKGROUND_COLOR
        {
            get
            {
                global::System.IntPtr cPtr = NDalicPINVOKE.Stage_DEBUG_BACKGROUND_COLOR_get();
                Vector4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector4(cPtr, false);
                if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        internal Stage() : this(NDalicPINVOKE.new_Stage__SWIG_0(), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal static Stage GetCurrent()
        {
            Stage ret = new Stage(NDalicPINVOKE.Stage_GetCurrent(), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal static bool IsInstalled()
        {
            bool ret = NDalicPINVOKE.Stage_IsInstalled();
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal Stage(Stage handle) : this(NDalicPINVOKE.new_Stage__SWIG_1(Stage.getCPtr(handle)), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal Stage Assign(Stage rhs)
        {
            Stage ret = new Stage(NDalicPINVOKE.Stage_Assign(swigCPtr, Stage.getCPtr(rhs)), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void Add(Actor actor)
        {
            NDalicPINVOKE.Stage_Add(swigCPtr, Actor.getCPtr(actor));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal void Remove(Actor actor)
        {
            NDalicPINVOKE.Stage_Remove(swigCPtr, Actor.getCPtr(actor));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal Size2D GetSize()
        {
            Size2D ret = new Size2D(NDalicPINVOKE.Stage_GetSize(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal RenderTaskList GetRenderTaskList()
        {
            RenderTaskList ret = new RenderTaskList(NDalicPINVOKE.Stage_GetRenderTaskList(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal uint GetLayerCount()
        {
            uint ret = NDalicPINVOKE.Stage_GetLayerCount(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public Layer GetLayer(uint depth)
        {
            Layer ret = new Layer(NDalicPINVOKE.Stage_GetLayer(swigCPtr, depth), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal Layer GetRootLayer()
        {
            Layer ret = new Layer(NDalicPINVOKE.Stage_GetRootLayer(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }


        internal void SetBackgroundColor(Color color)
        {
            NDalicPINVOKE.Stage_SetBackgroundColor(swigCPtr, Color.getCPtr(color));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal Color GetBackgroundColor()
        {
            Color ret = new Color(NDalicPINVOKE.Stage_GetBackgroundColor(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
        internal Vector2 GetDpi()
        {
            Vector2 ret = new Vector2(NDalicPINVOKE.Stage_GetDpi(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal ObjectRegistry GetObjectRegistry()
        {
            ObjectRegistry ret = new ObjectRegistry(NDalicPINVOKE.Stage_GetObjectRegistry(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void KeepRendering(float durationSeconds)
        {
            NDalicPINVOKE.Stage_KeepRendering(swigCPtr, durationSeconds);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal KeyEventSignal KeyEventSignal()
        {
            KeyEventSignal ret = new KeyEventSignal(NDalicPINVOKE.Stage_KeyEventSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal VoidSignal EventProcessingFinishedSignal()
        {
            VoidSignal ret = new VoidSignal(NDalicPINVOKE.Stage_EventProcessingFinishedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal TouchSignal TouchSignal()
        {
            TouchSignal ret = new TouchSignal(NDalicPINVOKE.Stage_TouchSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal StageWheelSignal WheelEventSignal()
        {
            StageWheelSignal ret = new StageWheelSignal(NDalicPINVOKE.Stage_WheelEventSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal VoidSignal ContextLostSignal()
        {
            VoidSignal ret = new VoidSignal(NDalicPINVOKE.Stage_ContextLostSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal VoidSignal ContextRegainedSignal()
        {
            VoidSignal ret = new VoidSignal(NDalicPINVOKE.Stage_ContextRegainedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal VoidSignal SceneCreatedSignal()
        {
            VoidSignal ret = new VoidSignal(NDalicPINVOKE.Stage_SceneCreatedSignal(swigCPtr), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

    }

}
