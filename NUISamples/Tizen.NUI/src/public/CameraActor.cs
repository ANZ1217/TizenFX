// Copyright (c) 2017 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
// This File has been auto-generated by SWIG and then modified using DALi Ruby Scripts
// Some have been manually changed

namespace Tizen.NUI
{

    /// <summary>
    /// CameraActor controls a camera. 
    /// Allows the developer to use actor semantics to control a camera. 
    /// NUI has a concept of a camera to display its virtual 3D world to a 2D screen.
    /// There are 2 ways of using the camera in NUI: 
    /// - For 2D applications, you do not need to care about the camera at all. The default camera is already best suited for 2D applications
    /// (configured to have the origin of the coordinate system at the top-left corner of the screen, and unit 1 as 1 pixel of the screen). This is a typical way.
    /// - For 3D applications, you can change the view by manipulating the camera.You can translate or rotate the camera in this case.
    /// Note that the top-left corner of the screen and unit 1 no longer are (0,0,0) and 1 pixel after manipulating the camera.
    /// There are two types of camera actor, FreeLook and LookAtTarget By default, the camera actor will be FreeLook. 
    /// - A FreeLook camera uses actor's orientation to control where the camera is looking.
    /// If no additional rotations are specified, the camera looks in the negative Z direction.
    /// - For LookAtTarget, the actor's orientation is ignored, instead the camera looks at TargetPosition in world coordinates.
    /// /// </summary>
    public class CameraActor : Actor
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal CameraActor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NDalicPINVOKE.CameraActor_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CameraActor obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~CameraActor()
        {
            DisposeQueue.Instance.Add(this);
        }

        /// <summary>
        /// To make CameraActor instance be disposed.
        /// </summary>
        public override void Dispose()
        {
            if (!Stage.IsInstalled())
            {
                DisposeQueue.Instance.Add(this);
                return;
            }

            lock (this)
            {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        NDalicPINVOKE.delete_CameraActor(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }


        internal class Property : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal Property(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Property obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~Property()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this)
                {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            NDalicPINVOKE.delete_CameraActor_Property(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            internal Property() : this(NDalicPINVOKE.new_CameraActor_Property(), true)
            {
                if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            }

            internal static readonly int TYPE = NDalicPINVOKE.CameraActor_Property_TYPE_get();
            internal static readonly int PROJECTION_MODE = NDalicPINVOKE.CameraActor_Property_PROJECTION_MODE_get();
            internal static readonly int FIELD_OF_VIEW = NDalicPINVOKE.CameraActor_Property_FIELD_OF_VIEW_get();
            internal static readonly int ASPECT_RATIO = NDalicPINVOKE.CameraActor_Property_ASPECT_RATIO_get();
            internal static readonly int NEAR_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_NEAR_PLANE_DISTANCE_get();
            internal static readonly int FAR_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_FAR_PLANE_DISTANCE_get();
            internal static readonly int LEFT_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_LEFT_PLANE_DISTANCE_get();
            internal static readonly int RIGHT_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_RIGHT_PLANE_DISTANCE_get();
            internal static readonly int TOP_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_TOP_PLANE_DISTANCE_get();
            internal static readonly int BOTTOM_PLANE_DISTANCE = NDalicPINVOKE.CameraActor_Property_BOTTOM_PLANE_DISTANCE_get();
            internal static readonly int TARGET_POSITION = NDalicPINVOKE.CameraActor_Property_TARGET_POSITION_get();
            internal static readonly int PROJECTION_MATRIX = NDalicPINVOKE.CameraActor_Property_PROJECTION_MATRIX_get();
            internal static readonly int VIEW_MATRIX = NDalicPINVOKE.CameraActor_Property_VIEW_MATRIX_get();
            internal static readonly int INVERT_Y_AXIS = NDalicPINVOKE.CameraActor_Property_INVERT_Y_AXIS_get();

        }

        /// <summary>
        /// Creates an initialized CameraActor handle.
        /// </summary>
        public CameraActor() : this(NDalicPINVOKE.CameraActor_New__SWIG_0(), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

        }

        /// <summary>
        /// Creates a CameraActor object.
        /// Sets the default camera perspective projection for the given canvas size
        /// </summary>
        /// <param name="size">The canvas size</param>
        public CameraActor(Size2D size) : this(NDalicPINVOKE.CameraActor_New__SWIG_1(Size2D.getCPtr(size)), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();

        }

        /// <summary>
        /// Downcasts a handle to CameraActor handle.
        /// If handle points to a CameraActor, the downcast produces valid handle.
        /// If not, the returned handle is left uninitialized.
        /// </summary>
        /// <param name="handle">to An object</param>
        /// <returns>Handle to a CameraActor or an uninitialized handle</returns>
        public new static CameraActor DownCast(BaseHandle handle)
        {
            CameraActor ret = new CameraActor(NDalicPINVOKE.CameraActor_DownCast(BaseHandle.getCPtr(handle)), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal CameraActor(CameraActor copy) : this(NDalicPINVOKE.new_CameraActor__SWIG_1(CameraActor.getCPtr(copy)), true)
        {
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal CameraActor Assign(CameraActor rhs)
        {
            CameraActor ret = new CameraActor(NDalicPINVOKE.CameraActor_Assign(swigCPtr, CameraActor.getCPtr(rhs)), false);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetType(CameraType type)
        {
            NDalicPINVOKE.CameraActor_SetType(swigCPtr, (int)type);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal CameraType GetType()
        {
            CameraType ret = (CameraType)NDalicPINVOKE.CameraActor_GetType(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetProjectionMode(ProjectionMode mode)
        {
            NDalicPINVOKE.CameraActor_SetProjectionMode(swigCPtr, (int)mode);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal ProjectionMode GetProjectionMode()
        {
            ProjectionMode ret = (ProjectionMode)NDalicPINVOKE.CameraActor_GetProjectionMode(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetFieldOfView(float fieldOfView)
        {
            NDalicPINVOKE.CameraActor_SetFieldOfView(swigCPtr, fieldOfView);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal float GetFieldOfView()
        {
            float ret = NDalicPINVOKE.CameraActor_GetFieldOfView(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetAspectRatio(float aspectRatio)
        {
            NDalicPINVOKE.CameraActor_SetAspectRatio(swigCPtr, aspectRatio);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal float GetAspectRatio()
        {
            float ret = NDalicPINVOKE.CameraActor_GetAspectRatio(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetNearClippingPlane(float nearClippingPlane)
        {
            NDalicPINVOKE.CameraActor_SetNearClippingPlane(swigCPtr, nearClippingPlane);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal float GetNearClippingPlane()
        {
            float ret = NDalicPINVOKE.CameraActor_GetNearClippingPlane(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetFarClippingPlane(float farClippingPlane)
        {
            NDalicPINVOKE.CameraActor_SetFarClippingPlane(swigCPtr, farClippingPlane);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal float GetFarClippingPlane()
        {
            float ret = NDalicPINVOKE.CameraActor_GetFarClippingPlane(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetTargetPosition(Vector3 targetPosition)
        {
            NDalicPINVOKE.CameraActor_SetTargetPosition(swigCPtr, Vector3.getCPtr(targetPosition));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal Vector3 GetTargetPosition()
        {
            Vector3 ret = new Vector3(NDalicPINVOKE.CameraActor_GetTargetPosition(swigCPtr), true);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetInvertYAxis(bool invertYAxis)
        {
            NDalicPINVOKE.CameraActor_SetInvertYAxis(swigCPtr, invertYAxis);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal bool GetInvertYAxis()
        {
            bool ret = NDalicPINVOKE.CameraActor_GetInvertYAxis(swigCPtr);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        internal void SetPerspectiveProjection(Vector2 size)
        {
            NDalicPINVOKE.CameraActor_SetPerspectiveProjection(swigCPtr, Vector2.getCPtr(size));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal void SetOrthographicProjection(Vector2 size)
        {
            NDalicPINVOKE.CameraActor_SetOrthographicProjection__SWIG_0(swigCPtr, Vector2.getCPtr(size));
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        internal void SetOrthographicProjection(float left, float right, float top, float bottom, float near, float far)
        {
            NDalicPINVOKE.CameraActor_SetOrthographicProjection__SWIG_1(swigCPtr, left, right, top, bottom, near, far);
            if (NDalicPINVOKE.SWIGPendingException.Pending) throw NDalicPINVOKE.SWIGPendingException.Retrieve();
        }

        /// <summary>
        /// Gets/Sets the camera type. The default type is FreeLook
        /// </summary>
        public string Type
        {
            get
            {
                string temp;
                GetProperty(CameraActor.Property.TYPE).Get(out temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.TYPE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets the projection mode.
        /// </summary>
        public string ProjectionMode
        {
            get
            {
                string temp;
                GetProperty(CameraActor.Property.PROJECTION_MODE).Get(out temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.PROJECTION_MODE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets the field of view.
        /// </summary>
        public float FieldOfView
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.FIELD_OF_VIEW).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.FIELD_OF_VIEW, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets the aspect ratio of the camera.
        /// </summary>
        public float AspectRatio
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.ASPECT_RATIO).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.ASPECT_RATIO, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets near plane distance
        /// </summary>
        public float NearPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.NEAR_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.NEAR_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets far plane distance
        /// </summary>
        public float FarPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.FAR_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.FAR_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets left plane distance
        /// </summary>
        public float LeftPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.LEFT_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.LEFT_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets right plane distance
        /// </summary>
        public float RightPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.RIGHT_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.RIGHT_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets top plane distance
        /// </summary>
        public float TopPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.TOP_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.TOP_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets bottom plane distance
        /// </summary>
        public float BottomPlaneDistance
        {
            get
            {
                float temp = 0.0f;
                GetProperty(CameraActor.Property.BOTTOM_PLANE_DISTANCE).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.BOTTOM_PLANE_DISTANCE, new Tizen.NUI.PropertyValue(value));
            }
        }

        /// <summary>
        /// Gets/Sets the target position of the camera.
        /// </summary>
        public Position TargetPosition
        {
            get
            {
                Position temp = new Position(0.0f, 0.0f, 0.0f);
                GetProperty(CameraActor.Property.TARGET_POSITION).Get(temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.TARGET_POSITION, new Tizen.NUI.PropertyValue(value));
            }
        }
        internal Matrix ProjectionMatrix
        {
            get
            {
                Matrix temp = new Matrix();
                GetProperty(CameraActor.Property.PROJECTION_MATRIX).Get(temp);
                return temp;
            }
        }

        internal Matrix ViewMatrix
        {
            get
            {
                Matrix temp = new Matrix();
                GetProperty(CameraActor.Property.VIEW_MATRIX).Get(temp);
                return temp;
            }
        }

        /// <summary>
        /// Requests for an inversion on the Y axis on the projection calculation.
        /// </summary>
        public bool InvertYAxis
        {
            get
            {
                bool temp = false;
                GetProperty(CameraActor.Property.INVERT_Y_AXIS).Get(ref temp);
                return temp;
            }
            set
            {
                SetProperty(CameraActor.Property.INVERT_Y_AXIS, new Tizen.NUI.PropertyValue(value));
            }
        }

    }

    /// <summary>
    /// Enumeration for type determination of how camera operates.
    /// FreeLook : Camera orientation is taken from CameraActor
    /// LookAtTarget : Camera is oriented to always look at a target
    /// </summary>
    public enum CameraType
    {
        FreeLook,
        LookAtTarget
    }

    /// <summary>
    /// Enumeration for projection modes.
    /// PerspectiveProjection : Distance causes foreshortening; objects further from the camera appear smaller
    /// OrthographicProjection : Relative distance from the camera does not affect the size of objects
    /// </summary>
    public enum ProjectionMode
    {
        PerspectiveProjection,
        OrthographicProjection
    }

}
